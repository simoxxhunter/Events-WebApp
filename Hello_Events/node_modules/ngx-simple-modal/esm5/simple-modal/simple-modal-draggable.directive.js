import * as tslib_1 from "tslib";
import { Directive, AfterViewInit, OnDestroy, Input, Output, ElementRef, NgZone, EventEmitter, Renderer2, OnChanges } from '@angular/core';
import { Subject, fromEvent } from 'rxjs';
import { filter, switchMap, map, takeUntil } from 'rxjs/operators';
var DraggableDirective = /** @class */ (function () {
    function DraggableDirective(host, zone, renderer) {
        this.host = host;
        this.zone = zone;
        this.renderer = renderer;
        this.dragEnabled = false;
        this.dragged = new EventEmitter();
        this.delta = { x: 0, y: 0 };
        this.offset = { x: 0, y: 0 };
        this.enabled = true;
        this.destroy$ = new Subject();
    }
    Object.defineProperty(DraggableDirective.prototype, "dialogDragOffset", {
        set: function (offset) {
            this.reset(offset);
        },
        enumerable: true,
        configurable: true
    });
    DraggableDirective.prototype.ngAfterViewInit = function () {
        if (!this.enabled) {
            return;
        }
        this.init();
    };
    DraggableDirective.prototype.ngOnChanges = function () {
        if (!this.enabled && this.dragEnabled && this.dragTarget) {
            this.enabled = true;
            /** determine if the component has been init by the handle variable */
            if (this.handle) {
                this.renderer.setStyle(this.handle, 'cursor', 'move');
            }
            else if (this.enabled) {
                this.init();
            }
        }
        if (!this.dragEnabled) {
            this.enabled = false;
            if (this.handle) {
                this.renderer.setStyle(this.handle, 'cursor', '');
            }
        }
    };
    DraggableDirective.prototype.ngOnDestroy = function () {
        this.destroy$.next();
    };
    DraggableDirective.prototype.reset = function (offset) {
        var defaultValues = { x: 0, y: 0 };
        this.offset = tslib_1.__assign({}, defaultValues, offset);
        this.delta = tslib_1.__assign({}, defaultValues);
        this.translate();
    };
    DraggableDirective.prototype.setupEvents = function () {
        var _this = this;
        this.zone.runOutsideAngular(function () {
            var mousedown$ = fromEvent(_this.handle, 'mousedown');
            var mousemove$ = fromEvent(document, 'mousemove');
            var mouseup$ = fromEvent(document, 'mouseup');
            var mousedrag$ = mousedown$.pipe(filter(function () { return _this.enabled; }), map(function (event) { return ({
                startX: event.clientX,
                startY: event.clientY
            }); }), switchMap(function (_a) {
                var startX = _a.startX, startY = _a.startY;
                return mousemove$.pipe(map(function (event) {
                    event.preventDefault();
                    _this.delta = {
                        x: event.clientX - startX,
                        y: event.clientY - startY
                    };
                }), takeUntil(mouseup$));
            }), takeUntil(_this.destroy$));
            mousedrag$.subscribe(function () {
                if (_this.delta.x === 0 && _this.delta.y === 0) {
                    return;
                }
                _this.translate();
            });
            mouseup$
                .pipe(filter(function () { return _this.enabled; }), 
            /** Only emit change if the element has moved */
            filter(function () { return _this.delta.x !== 0 || _this.delta.y !== 0; }), takeUntil(_this.destroy$))
                .subscribe(function () {
                _this.offset.x += _this.delta.x;
                _this.offset.y += _this.delta.y;
                _this.dragged.emit(_this.offset);
                _this.delta = { x: 0, y: 0 };
            });
        });
    };
    DraggableDirective.prototype.translate = function () {
        var _this = this;
        if (this.target) {
            this.zone.runOutsideAngular(function () {
                requestAnimationFrame(function () {
                    var transform = "translate(" + (_this.offset.x + _this.delta.x) + "px, " + (_this.offset.y + _this.delta.y) + "px)";
                    _this.renderer.setStyle(_this.target, 'transform', transform);
                });
            });
        }
    };
    /**
     * Init the directive
     */
    DraggableDirective.prototype.init = function () {
        if (!this.dragTarget) {
            throw new Error('You need to specify the drag target');
        }
        this.handle =
            this.dragHandle instanceof Element
                ? this.dragHandle
                : typeof this.dragHandle === 'string' && this.dragHandle
                    ? document.querySelector(this.dragHandle)
                    : this.host.nativeElement;
        /** add the move cursor */
        if (this.handle && this.enabled) {
            this.renderer.addClass(this.handle, 'handle');
        }
        this.target =
            this.dragTarget instanceof HTMLElement
                ? this.dragTarget
                : document.querySelector(this.dragTarget);
        this.setupEvents();
        this.translate();
    };
    DraggableDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    tslib_1.__decorate([
        Input()
    ], DraggableDirective.prototype, "dragHandle", void 0);
    tslib_1.__decorate([
        Input()
    ], DraggableDirective.prototype, "dragTarget", void 0);
    tslib_1.__decorate([
        Input()
    ], DraggableDirective.prototype, "dragEnabled", void 0);
    tslib_1.__decorate([
        Input()
    ], DraggableDirective.prototype, "dialogDragOffset", null);
    tslib_1.__decorate([
        Output()
    ], DraggableDirective.prototype, "dragged", void 0);
    DraggableDirective = tslib_1.__decorate([
        Directive({
            selector: '[dialogDraggable]'
        })
    ], DraggableDirective);
    return DraggableDirective;
}());
export { DraggableDirective };
//# sourceMappingURL=data:application/json;base64,